#!/usr/bin/env perl

use strict;
use warnings;
use feature qw(say);
use experimental qw(smartmatch);
use Getopt::Long qw(GetOptions);
use Pod::Usage qw(pod2usage);
use IPC::Run qw(run);

###############################################################################

my $PROGRAM = (split '/', $0)[-1];

sub version {
    say "version 0.1-alpha"
}

sub help {
    print <<END
usage: $PROGRAM [options]

Testbed YAML CLI.

options:
  --testbed,-t <name>       Testbed name.
  --verbose,-v              Enable verbose output.
                            Pass more times to increase level.
  --version                 Show version.
  --help,-h                 Show this help.
END
}

# Parse argument options
Getopt::Long::Configure ("bundling");
GetOptions (
    'testbed|t=s' => \(my $testbed = ''),
    'verbose|v+'  => \(my $verbose = 0),
    'version'     => sub { version(); exit 0 },
    'help|h'      => sub { help(); exit 0 },
) or help() and exit 1;

###############################################################################

# Print error message and exit with error code
sub fail { say @_; exit 1; }

#
# Get and validate testbed name
#
open my $file, '<', '/tmp/.ls-projects' or die "$!";
if (not $testbed) {
    my @testbeds = grep {/testbed/} <$file>;
    my $testbeds_str = join '', @testbeds;
    run [qw(rofi -lines 10 -dmenu)], \$testbeds_str, \$testbed, \*STDERR or die "$!";
    chomp $testbed
}
else {
    $testbed =~ /^[a-zA-Z0-9_-]+$/ or fail "Invalid testbed: $testbed";
    my @testbeds = grep {/$testbed$/} <$file>;
    fail "Unknown testbed: $testbed" if scalar @testbeds == 0;
    fail "There is more than one testbed matching this name:\n @testbeds" if scalar @testbeds > 1;
    chomp($testbed = $testbeds[0]);
}
close $file;

say "testbed: $testbed" if $verbose >= 1;
exit 0;

#
# Retrive testbed.yml from gerrit server
#
my $gerrit_ssh = "ssh://$ENV{'USER'}\@gerrit.server.com:29418";
my $testbed_yml;
run ["git", "archive", "--remote=$gerrit_ssh/$testbed.git", "HEAD", "testbed.yml"], '|', ["tar", "-xO"],
    \$testbed_yml, \*STDERR or die "$!";
say "testbed.yml:\n$testbed_yml" if $verbose >= 3;
